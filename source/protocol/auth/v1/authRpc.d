// Generated by the gRPC-dlang plugin.

module protocol.auth.v1.authRpc;

import protocol.auth.v1.auth;
import google.protobuf.empty;

import grpc;
import google.protobuf;
import hunt.logging;

import core.thread;
import std.array;
import std.traits;


/**
 *
 */
class AuthServiceClient
{
	this(Channel channel)
	{
		_channel = channel;
	}

	FederateReply Federate(FederateRequest request)
	{
		mixin(CM!(FederateReply, AuthServiceBase.SERVICE));
	}

	void Federate(FederateRequest request , void delegate(Status status, FederateReply response) dele)
	{
		mixin(CMA!(FederateReply, AuthServiceBase.SERVICE));
	}

	Session LoginFederated(LoginFederatedRequest request)
	{
		mixin(CM!(Session, AuthServiceBase.SERVICE));
	}

	void LoginFederated(LoginFederatedRequest request , void delegate(Status status, Session response) dele)
	{
		mixin(CMA!(Session, AuthServiceBase.SERVICE));
	}

	KeyReply Key(Empty request)
	{
		mixin(CM!(KeyReply, AuthServiceBase.SERVICE));
	}

	void Key(Empty request , void delegate(Status status, KeyReply response) dele)
	{
		mixin(CMA!(KeyReply, AuthServiceBase.SERVICE));
	}

	BeginAuthResponse BeginAuth(Empty request)
	{
		mixin(CM!(BeginAuthResponse, AuthServiceBase.SERVICE));
	}

	void BeginAuth(Empty request , void delegate(Status status, BeginAuthResponse response) dele)
	{
		mixin(CMA!(BeginAuthResponse, AuthServiceBase.SERVICE));
	}

	AuthStep NextStep(NextStepRequest request)
	{
		mixin(CM!(AuthStep, AuthServiceBase.SERVICE));
	}

	void NextStep(NextStepRequest request , void delegate(Status status, AuthStep response) dele)
	{
		mixin(CMA!(AuthStep, AuthServiceBase.SERVICE));
	}

	AuthStep StepBack(StepBackRequest request)
	{
		mixin(CM!(AuthStep, AuthServiceBase.SERVICE));
	}

	void StepBack(StepBackRequest request , void delegate(Status status, AuthStep response) dele)
	{
		mixin(CMA!(AuthStep, AuthServiceBase.SERVICE));
	}

	ClientReader!AuthStep StreamSteps(StreamStepsRequest request ){
		mixin(CM1!(AuthStep, AuthServiceBase.SERVICE));
	}

	private:
	Channel _channel;
}


/**
 *
 */
class AuthServiceBase: GrpcService
{
	enum SERVICE  = "protocol.auth.v1.AuthService";
	string getModule()
	{
		return SERVICE;
	}

	Status Federate(FederateRequest req, ref FederateReply res){ return Status.OK; }
	Status LoginFederated(LoginFederatedRequest req, ref Session res){ return Status.OK; }
	Status Key(Empty req, ref KeyReply res){ return Status.OK; }
	Status BeginAuth(Empty req, ref BeginAuthResponse res){ return Status.OK; }
	Status NextStep(NextStepRequest req, ref AuthStep res){ return Status.OK; }
	Status StepBack(StepBackRequest req, ref AuthStep res){ return Status.OK; }
	Status StreamSteps(StreamStepsRequest req, ServerWriter!AuthStep res){ return Status.OK; }

	Status process(string method, GrpcStream stream, ubyte[] complete)
	{
		switch(method)
		{
			mixin(SM!(FederateRequest, FederateReply , "Federate"));
			mixin(SM!(LoginFederatedRequest, Session , "LoginFederated"));
			mixin(SM!(Empty, KeyReply , "Key"));
			mixin(SM!(Empty, BeginAuthResponse , "BeginAuth"));
			mixin(SM!(NextStepRequest, AuthStep , "NextStep"));
			mixin(SM!(StepBackRequest, AuthStep , "StepBack"));
			mixin(SM1!(StreamStepsRequest, AuthStep , "StreamSteps"));
			mixin(NONE());
		}
	}
}


